# application.properties? ??
#server.port=8081
#spring.datasource.url=jdbc:mariadb://localhost:3306/member
#spring.datasource.username=root
#spring.datasource.password=1234

# ????? ??
# :?? ? value ??
#server:
#  port: 8081
#
#spring:
#  profiles:
#    active: dev
#  datasource:
#    url: jdbc:mariadb://localhost:3306/member
#    username: root
#    password: 1234
#
#--- #? ?? ??? ????? ?? => yml ??? ???? ?????
# 포트에 따라 서버의 목적을 변경 가능하다.
#
#server:
#  port: 8082
#spring:
#  profiles:
#    active: prod
#  datasource:
#    url: jdbc:mariadb://localhost:3307/member
#    username: root
#    password: 1234

spring:
#  Controller와 jsp 사용시에 경로와 확장자 설정
#  기본설정이 타임리프이므로, 타임리프 의존성 제거해야 jsp 사용가능
#  mvc:
#    view:
#      prefix: /WEB-INF/vewis/
#      suffix: .jsp

#  http://localhost:8080/swagger-ui/   (스웨거 url)
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
                                        #스키마 명
    url: jdbc:mariadb://localhost:3306/board1
    username: root
    password: 1234
  jpa:
    database: mysql
#    innoDB 엔진사용 설정     #jap의 주요 구현체
    database-platform: org.hibernate.dialect.MariaDBDialect
#    스키마는 사전 생성 필요!
    generate-ddl: true
    hibernate:
#      create 옵션은 매법 테이블을 drop후 생성 > 모든 변경 사항 반영 (컬럼 길이..) 처음 날릴때 잘 하기.
#      update 옵션은 변경사항만 alter를 적용 > 일부 변경 사항은 반영 안해줌 > raw DDL 커리문으로 변경
#      validate는 실제DB와의 차이만을 check > DB 직접 반영 x
#      실무에서는 update 또는 validate 사용
      ddl-auto: update
#   jpa가 자동으로 쿼리를 실행할때, 쿼리가 console창에 보여지도록함
    show_sql: true
#  springboot 2.4이상에서는 기본적으로 pathPatternParser를 사용하고 있는데
#  이는 이전버전과 다른 경로매칭 규칙을 가지고 있어, springfox와 같은 일부라이브러이에서는 문제 발생.
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

#mapper 파일의 위치를 설정
mybatis:
  mapper-locations: classpath:/mapper/**/*.xml